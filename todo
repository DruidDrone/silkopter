*- Video_Server: multi stream encoding
*	- high res 720-900p for file saving
*	- medim res 360/480p for streaming
*	- low res 140p for emergency streaming
&- Video_Server: camera controls - shutter speed, saturation, contrast, brightness, iso
*- Input: secure TCP communication channel
*- Sensor_Board: comm channel with the crius
*- crius FW
*	- idle mode
*	- armed mode
*	- calibration mode
*- GS: ground station calibration update
* rate pid
* UAV inputs - ouya controller
* Camera inputs
* Sim: simulator update
* drotek 10dof imu support
* fix motor mixer
* raspi PWM output tests using pigpio
* use autojsoncxx for settings serialization
* vibration tests and filtering
* reorganized HW code into HAL interfaces
* config files
* stability pid
* latency tests
* rewrite the TCP code to use reliable UDP with priorities
* GPS code
* odroid-w support
	* ADC for current/voltage sensors

* calibration code for streams of type Acceleration, Magnrtic Field and Angular Velocity if the config has bias/scale for them
* motor mixer processor
	inputs:
		torque in N/m
		collective thrust in N
	outputs
		per motor thrust in N
* motor model processor
	inputs
		per motor thrust in N
	outputs
		per motor throttle factors in 0..1 range


* motor mixer specialized configurator

* check why servo input of 1 stops the motors
- HUD: added altitude and proximity readings 
- Brain & HUD: compute the ground proximity from the proximity values, show them on the hud
- add autolanding
- add return home
- add failsafe for signal loss


nodes parsing:

Each node has an init and config structs, that are custom. I want a uniform init() and set_config() method in the INode abstract interface so the Init_Params and Config have to inherit from a IInit_Params and IConfig interface and cast internally

So:
struct IInit_Params
{
}
struct IConfig
{
}

class INode
{
    virtual bool init(std::unique_ptr<IInit_Params> params) = 0;
    virtual bool set_config(std::unique_ptr<IConfig> config) = 0;
}

The IInit_Params and IConfig have to be serializable from/to:
    - JSON, for saving the settings / config on the brain
    - binary (optional), for transmitting from/to the GS. This can work with JSON as well
Ideally this code has to be generated, not hand written

I need a way to create UI on the GS for both the init params and the config.
Ideally this code has to be generated as well, or has to be created at run-time (the init params & config iterated for fields and the UI property sheet created from this.) Ideally this has to support ui-specific fields like UI Name ('Motor Torque' instead of 'motor_torque'), tool-tips for units, specific controls (like a rotation control instead of 4 floats for a quaternion).



