alias int8_t = int : [ min = -128, max = 127, native_type = "int8_t" ];
alias uint8_t = int : [ min = 0, max = 255, native_type = "uint8_t" ];
alias int16_t = int : [ min = -32768, max = 32767, native_type = "int16_t" ];
alias uint16_t = int : [ min = 0, max = 65535, native_type = "uint16_t" ];
alias int32_t = int : [ min = -2147483648, max = 2147483647, native_type = "int32_t" ];
alias uint32_t = int : [ min = 0, max = 4294967295, native_type = "uint32_t" ];
alias ufloat = float : [ min = 0.f ];


alias muf_t = float : [ min = 0.f, max = 1.f ];
alias direction_t = vec3f;// : [ normalized = true ];
alias euler_t = float : [ min = -180.f, max = 180.f ];
alias euler3_t = vec3f : [ min = {-180.f, -180.f, -180.f}, max = {180.f, 180.f, 180.f} ];

alias gpio_t = uint32_t : [ min =  0, max = 40 ];

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Settings

struct Settings
{
    struct Input
    {
        struct Sticks_Calibration
        {
            float yaw_min = 0.f;
            float yaw_center = 0.5f;
            float yaw_max = 1.f;
            float yaw_deadband = 0.f;
            float yaw_curve = 0.f;
            float pitch_min = 0.f;
            float pitch_center = 0.5f;
            float pitch_max = 1.f;
            float pitch_deadband = 0.f;
            float pitch_curve = 0.f;
            float roll_min = 0.f;
            float roll_center = 0.5f;
            float roll_max = 1.f;
            float roll_deadband = 0.f;
            float roll_curve = 0.f;
            float throttle_min = 0.f;
            float throttle_center = 0.5f;
            float throttle_max = 1.f;
            float throttle_deadband = 0.f;
            float throttle_curve = 0.f;
        };

        Sticks_Calibration sticks_calibration;
    };

    Input input;

    struct HW
    {
    	alias pigpio_period_us_t = uint32_t : [ min = 1, max = 10 ];
    	pigpio_period_us_t pigpio_period_us = 1;

    	uint32_t display_incremental_step_us = 1000;
    };

    HW hw;

    struct Comms
    {
        alias channel_t = int : [ min = 1, max = 11 ];
        channel_t channel = 1: [ ui_name = "Channel" ];

        alias tx_power_t = float : [ min = 0.f, max = 20.5f ];
        tx_power_t tx_power = 20.5f: [ ui_name = "TX Power" ];

        alias mtu_t = int : [ min = 128, max = 1360 ];
        mtu_t mtu = 1360: [ ui_name = "MTU" ];

	enum rate_t
	{
      B_1M_CCK : [ ui_name = "11b 1Mbps CCK" ],
      B_2M_CCK : [ ui_name = "11b 2Mbps CCK" ],
      B_2M_CCK_SHORT_PREAMBLE : [ ui_name = "11b 2Mbps Short Preamble CCK" ],
      B_5_5M_CCK : [ ui_name = "11b 5.5Mbps CCK" ],
      B_5_5M_CCK_SHORT_PREAMBLE : [ ui_name = "11b 5.5Mbps Short Preamble CCK" ],
      B_11M_CCK : [ ui_name = "11b 11Mbps CCK" ],
      B_11M_CCK_SHORT_PREAMBLE : [ ui_name = "11b 11Mbps Short Preamble CCK" ],
      G_6M_ODFM : [ ui_name = "11g 6Mbps ODFM" ],
      G_9M_ODFM : [ ui_name = "11g 9Mbps ODFM" ],
      G_12M_ODFM : [ ui_name = "11g 12Mbps ODFM" ],
      G_18M_ODFM : [ ui_name = "11g 18Mbps ODFM" ],
      G_24M_ODFM : [ ui_name = "11g 24Mbps ODFM" ],
      G_36M_ODFM : [ ui_name = "11g 36Mbps ODFM" ],
      G_48M_ODFM : [ ui_name = "11g 48Mbps ODFM" ],
      G_54M_ODFM : [ ui_name = "11g 56Mbps ODFM" ],
	};

	rate_t rate = rate_t::B_11M_CCK : [ ui_name = "Rate" ];

        alias fec_coding_k_t = int : [ min = 1, max = 32 ];
        alias fec_coding_n_t = int : [ min = 1, max = 32 ];
        fec_coding_k_t fec_coding_k = 12 : [ ui_name = "FEC Coding K" ];
        fec_coding_n_t fec_coding_n = 20 : [ ui_name = "FEC Coding N" ];
    };

    Comms comms;

    struct Battery_Info
    {
    	float low_voltage = 7.f;
    	float critical_voltage = 6.f;
    	float calibration_bias = 0.f;
    	float calibration_scale = 1.f;
    };

    Battery_Info battery_info;
};

