#include "Splash_Menu_Page.h"
#include "Adafruit_GFX.h"


#include "Menu_System.h"
#include "Main_Menu_Page.h"

namespace silk
{

extern int s_version_major;
extern int s_version_minor;

///////////////////////////////////////////////////////////////////////////////////////////////////

//Created with: http://manytools.org/hacker-tools/image-to-byte-array/
static const uint8_t s_splash_img[128*64] =
{
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
    0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0x80, 0x0, 0x0, 0x0, 0x70, 0x0, 0x0, 0x0, 0x0,
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1f, 0xf0, 0x0, 0x0, 0x3, 0xff, 0x0, 0x0, 0x0,
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x78, 0x3c, 0x0, 0x0, 0xf, 0x87, 0x80, 0x0,
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xe0, 0xe, 0x0, 0x0, 0x1c, 0x0, 0xe0,
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x80, 0x7, 0x0, 0x0, 0x38, 0x0,
    0x60, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0x0, 0x3, 0x80, 0x0, 0x30,
    0x0, 0x30, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0x0, 0x1, 0x80, 0x0,
    0x60, 0x0, 0x18, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6, 0x0, 0x0, 0xc0,
    0x0, 0x60, 0x0, 0x18, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6, 0x0, 0x0,
    0xc0, 0x0, 0xc0, 0x0, 0x18, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6, 0x0,
    0x0, 0xc0, 0x0, 0xc0, 0x0, 0xc, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4,
    0x0, 0x0, 0xc0, 0x0, 0xc0, 0x0, 0xc, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
    0x4, 0x1, 0xc0, 0xc0, 0x0, 0xc0, 0xe0, 0xc, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
    0x0, 0x6, 0x1, 0xe0, 0xc0, 0x0, 0xc1, 0xe0, 0xc, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
    0x0, 0x0, 0x6, 0x1, 0xf0, 0xc0, 0x0, 0xc3, 0xe0, 0x8, 0x0, 0x0, 0x0, 0x0, 0x0,
    0x0, 0x0, 0x0, 0x6, 0x0, 0xfc, 0x0, 0x0, 0x7, 0xc0, 0x18, 0x0, 0x0, 0x0, 0x0,
    0x0, 0x0, 0x0, 0x0, 0x7, 0x0, 0x7e, 0x0, 0x0, 0x1f, 0x80, 0x18, 0x0, 0x0, 0x0,
    0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0x0, 0x3f, 0x80, 0x0, 0x3f, 0x80, 0x30, 0x0, 0x0,
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x80, 0x3f, 0xc0, 0x0, 0xff, 0x0, 0x70, 0x0,
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0xc0, 0x1f, 0xf0, 0x3, 0xfe, 0x0, 0xe0,
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf0, 0xf, 0xfe, 0xf, 0xfc, 0x3,
    0xc0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3f, 0x8f, 0xff, 0xff, 0xfc,
    0x7f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf, 0x87, 0xff, 0xff,
    0xf8, 0x7c, 0x0, 0x0, 0x18, 0xc0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0xff,
    0xff, 0xf8, 0x0, 0x0, 0x7e, 0x18, 0xc0, 0x0, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3,
    0xff, 0xff, 0xf0, 0x0, 0x0, 0xff, 0x18, 0xc0, 0x0, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0,
    0x1, 0xff, 0xff, 0xf0, 0x0, 0x1, 0xc1, 0x18, 0xc0, 0x0, 0x3, 0x0, 0x0, 0x0, 0x0,
    0x0, 0x1, 0xff, 0xff, 0xe0, 0x0, 0x1, 0x80, 0x18, 0xc1, 0x9b, 0xc7, 0xf6, 0x70, 0x0,
    0x0, 0x0, 0x1, 0xff, 0xff, 0xe0, 0x0, 0x1, 0x80, 0x18, 0xc3, 0x1f, 0xe7, 0xf7, 0xf0,
    0x0, 0x0, 0x0, 0x0, 0xff, 0xff, 0xe0, 0x0, 0x0, 0xf0, 0x18, 0xc6, 0x1c, 0x73, 0x7,
    0x0, 0x0, 0x0, 0x0, 0x0, 0xff, 0xff, 0xe0, 0x0, 0x0, 0x7f, 0x18, 0xcc, 0x18, 0x33,
    0x6, 0x0, 0x0, 0x0, 0x0, 0x0, 0xff, 0xff, 0xe0, 0x0, 0x0, 0x7, 0x98, 0xd8, 0x18,
    0x33, 0x6, 0x0, 0x0, 0x0, 0x0, 0x0, 0xff, 0xff, 0xe0, 0x0, 0x0, 0x1, 0x98, 0xfc,
    0x18, 0x33, 0x6, 0x0, 0x0, 0x0, 0x0, 0x1, 0xff, 0xff, 0xe0, 0x0, 0x0, 0x1, 0x98,
    0xce, 0x18, 0x33, 0x6, 0x0, 0x0, 0x0, 0x0, 0x1, 0xff, 0xff, 0xe0, 0x0, 0x1, 0x3,
    0x98, 0xc7, 0x18, 0x63, 0x6, 0x0, 0x0, 0x0, 0x0, 0x1, 0xff, 0xff, 0xf0, 0x0, 0x1,
    0xff, 0x18, 0xc3, 0x9f, 0xe3, 0xf6, 0x0, 0x0, 0x0, 0x0, 0x3, 0xff, 0xff, 0xf0, 0x0,
    0x0, 0xfe, 0x18, 0xc1, 0xdf, 0xc1, 0xf6, 0x0, 0x0, 0x0, 0x0, 0x3, 0xff, 0xff, 0xf8,
    0x0, 0x0, 0x0, 0x0, 0x0, 0x18, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf, 0x87, 0xff, 0xff,
    0xf8, 0x7c, 0x0, 0x0, 0x0, 0x0, 0x18, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3f, 0x8f, 0xff,
    0xff, 0xfc, 0x7f, 0x0, 0x0, 0x0, 0x0, 0x18, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf0, 0xf,
    0xfe, 0xf, 0xfc, 0x3, 0xc0, 0x0, 0x0, 0x0, 0x18, 0x0, 0x0, 0x0, 0x0, 0x1, 0xc0,
    0x1f, 0xf0, 0x3, 0xfe, 0x0, 0xe0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1,
    0x80, 0x3f, 0xc0, 0x0, 0xff, 0x0, 0x70, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
    0x3, 0x0, 0x3f, 0x80, 0x0, 0x7f, 0x80, 0x30, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
    0x0, 0x7, 0x0, 0x7e, 0x0, 0x0, 0x1f, 0x80, 0x18, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
    0x0, 0x0, 0x6, 0x0, 0xfc, 0x0, 0x0, 0xf, 0xc0, 0x18, 0x0, 0x0, 0x0, 0x0, 0x0,
    0x0, 0x0, 0x0, 0x6, 0x1, 0xf0, 0x40, 0x0, 0x43, 0xe0, 0x8, 0x0, 0x0, 0x0, 0x0,
    0x0, 0x0, 0x0, 0x0, 0x6, 0x1, 0xe0, 0xc0, 0x0, 0xc1, 0xe0, 0xc, 0x0, 0x0, 0x0,
    0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0x1, 0xc0, 0xc0, 0x0, 0xc0, 0xe0, 0xc, 0x0, 0x0,
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0xc0, 0x0, 0xc0, 0x0, 0xc, 0x0,
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6, 0x0, 0x0, 0xc0, 0x0, 0xc0, 0x0, 0xc,
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6, 0x0, 0x0, 0xc0, 0x0, 0xc0, 0x0,
    0x18, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6, 0x0, 0x0, 0xc0, 0x0, 0x60,
    0x0, 0x18, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0x0, 0x1, 0x80, 0x0,
    0x60, 0x0, 0x18, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0x0, 0x3, 0x80,
    0x0, 0x30, 0x0, 0x30, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x80, 0x7,
    0x0, 0x0, 0x38, 0x0, 0x60, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xe0,
    0xe, 0x0, 0x0, 0x1c, 0x0, 0xe0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
    0x78, 0x3c, 0x0, 0x0, 0xf, 0x7, 0x80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
    0x0, 0x3f, 0xf0, 0x0, 0x0, 0x3, 0xff, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
    0x0, 0x0, 0x7, 0xc0, 0x0, 0x0, 0x0, 0x78, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
    0x0, 0x0, 0x0, 0x0,
};

///////////////////////////////////////////////////////////////////////////////////////////////////

Splash_Menu_Page::Splash_Menu_Page(std::unique_ptr<IMenu_Page> mm)
    : m_mm(std::move(mm))
{
    m_start_tp = Clock::now();
}

///////////////////////////////////////////////////////////////////////////////////////////////////

bool Splash_Menu_Page::process(Input& input, Menu_System& menu_system)
{
//    m_input_data.yaw = input.get_commands().sticks.yaw;
//    m_input_data.pitch = input.get_commands().sticks.pitch;
//    m_input_data.roll = input.get_commands().sticks.roll;
//    m_input_data.throttle = input.get_commands().sticks.throttle;

//    m_input_data.encoder1_clicks = input.get_param_encoder1().get_clicks();
//    m_input_data.encoder2_clicks = input.get_param_encoder2().get_clicks();

    if (Clock::now() - m_start_tp > std::chrono::seconds(1))
    {
        menu_system.push_page(std::move(m_mm));
        return false; //to pop the splash
    }

    return true;
}

///////////////////////////////////////////////////////////////////////////////////////////////////

void Splash_Menu_Page::render(Adafruit_GFX& display)
{
    display.drawBitmap(0, 0, s_splash_img, 128, 64, 1);

    display.setCursor(display.width() - 32, display.height() - 8);
    display.printf("v%d.%d", s_version_major, s_version_minor);

//    int16_t y = 2;
//    int16_t w = s_display.width();

//    {
//        int16_t axis_x = 8;
//        int16_t axis_w = w - axis_x - 1;
//        int16_t axis_h = 5;
//        int16_t axis_y = y + axis_h/2 + 1;
//        s_display.setCursor(0, y);
//        s_display.print("Y");
//        s_display.drawLine(axis_x, axis_y, axis_x + axis_w, axis_y, 1);
//        s_display.drawLine(axis_x + axis_w/2, axis_y - 1, axis_x + axis_w/2, axis_y + 1, 1);
//        int16_t line_x = axis_x + m_input_data.yaw * axis_w;
//        s_display.drawLine(line_x, axis_y - 2, line_x, axis_y + 2, 1);
//        y += 8;
//    }
//    {
//        int16_t axis_x = 8;
//        int16_t axis_w = w - axis_x - 1;
//        int16_t axis_h = 5;
//        int16_t axis_y = y + axis_h/2 + 1;
//        s_display.setCursor(0, y);
//        s_display.print("P");
//        s_display.drawLine(axis_x, axis_y, axis_x + axis_w, axis_y, 1);
//        s_display.drawLine(axis_x + axis_w/2, axis_y - 1, axis_x + axis_w/2, axis_y + 1, 1);
//        int16_t line_x = axis_x + m_input_data.pitch * axis_w;
//        s_display.drawLine(line_x, axis_y - 2, line_x, axis_y + 2, 1);
//        y += 8;
//    }
//    {
//        int16_t axis_x = 8;
//        int16_t axis_w = w - axis_x - 1;
//        int16_t axis_h = 5;
//        int16_t axis_y = y + axis_h/2 + 1;
//        s_display.setCursor(0, y);
//        s_display.print("R");
//        s_display.drawLine(axis_x, axis_y, axis_x + axis_w, axis_y, 1);
//        s_display.drawLine(axis_x + axis_w/2, axis_y - 1, axis_x + axis_w/2, axis_y + 1, 1);
//        int16_t line_x = axis_x + m_input_data.roll * axis_w;
//        s_display.drawLine(line_x, axis_y - 2, line_x, axis_y + 2, 1);
//        y += 8;
//    }
//    {
//        int16_t axis_x = 8;
//        int16_t axis_w = w - axis_x - 1;
//        int16_t axis_h = 5;
//        int16_t axis_y = y + axis_h/2 + 1;
//        s_display.setCursor(0, y);
//        s_display.print("T");
//        s_display.drawLine(axis_x, axis_y, axis_x + axis_w, axis_y, 1);
//        s_display.drawLine(axis_x + axis_w/2, axis_y - 1, axis_x + axis_w/2, axis_y + 1, 1);
//        int16_t line_x = axis_x + m_input_data.throttle * axis_w;
//        s_display.drawLine(line_x, axis_y - 2, line_x, axis_y + 2, 1);
//        y += 8;
//    }

//    float clicks_per_turn = 18.f;
//    {
//        int16_t radius = 10;
//        int16_t center_x = 4 + radius;
//        int16_t center_y = y + radius + 4;

//        s_display.drawCircle(center_x, center_y, radius, 1);
//        s_display.fillCircle(center_x, center_y, 4, 1);
//        float rad = m_input_data.encoder1_clicks * 3.141592653f / (180.f / clicks_per_turn);
//        int16_t px = center_x + std::cos(rad)*radius;
//        int16_t py = center_y + std::sin(rad)*radius;

//        s_display.drawLine(center_x, center_y, px, py, 1);
//    }
//    {
//        int16_t radius = 10;
//        int16_t center_x = 30 + radius;
//        int16_t center_y = y + radius + 4;

//        s_display.drawCircle(center_x, center_y, radius, 1);
//        s_display.fillCircle(center_x, center_y, 4, 1);
//        float rad = m_input_data.encoder2_clicks * 3.141592653f / (180.f / clicks_per_turn);
//        int16_t px = center_x + std::cos(rad)*radius;
//        int16_t py = center_y + std::sin(rad)*radius;

//        s_display.drawLine(center_x, center_y, px, py, 1);
//    }
//    {
//        int16_t btn_list_x = 106;
//        int16_t btn_list_y = y;

//        int16_t btn_size = 8;
//        for (size_t r = 0; r < input.get_button_matrix().get_row_count(); r++)
//        {
//            for (size_t c = 0; c < input.get_button_matrix().get_row_count(); c++)
//            {
//                int16_t btn_x = 70 + c*(btn_size - 1);
//                int16_t btn_y = y + r*(btn_size - 1);
//                if (input.get_button_matrix().get_button(r, c).is_pressed())
//                {
//                    s_display.fillRect(btn_x, btn_y, btn_size, btn_size, 1);
//                    s_display.setCursor(btn_list_x, btn_list_y);
//                    s_display.printf("%d%d", r, c);
//                    btn_list_y += 8;
//                }
//                else
//                {
//                    s_display.drawRect(btn_x, btn_y, btn_size, btn_size, 1);
//                }
//            }
//        }
//    }
}

}
