//import "types.def"

alias int8_t = int : [ min = -128, max = 127, native_type = "int8_t" ];
alias uint8_t = int : [ min = 0, max = 255, native_type = "uint8_t" ];
alias int16_t = int : [ min = -32768, max = 32767, native_type = "int16_t" ];
alias uint16_t = int : [ min = 0, max = 65535, native_type = "uint16_t" ];
alias int32_t = int : [ min = -2147483648, max = 2147483647, native_type = "int32_t" ];
alias uint32_t = int : [ min = 0, max = 4294967295, native_type = "uint32_t" ];
alias ufloat = float : [ min = 0.f ];


alias muf_t = float : [ min = 0.f, max = 1.f ];
alias direction_t = vec3f;// : [ normalized = true ];
alias euler_t = float : [ min = -180.f, max = 180.f ];
alias euler3_t = vec3f : [ min = {-180.f, -180.f, -180.f}, max = {180.f, 180.f, 180.f} ];
alias servo_signal_t = float : [ min = 1.f, max = 2.f ];
alias pwm_signal_t = float : [ min = 0.f, max = 1.f ];

struct IUAV_Descriptor
{
    alias mass_t = float : [ min = 0.01f, max = 100.f ];

    string name : [ui_name = "Name"];
    mass_t mass : [ui_name = "Mass (Kg)"];
    ufloat moment_of_inertia : [ui_name = "Moment Of Inertia"];
};

struct IBus_Descriptor
{
};

struct INode_Descriptor
{
};

struct INode_Config
{
};


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Settings

struct Settings
{
    struct Bus_Data
    {
        string name;
        string type;
        poly<const IBus_Descriptor> descriptor;
    };

    struct Node_Data
    {
        string name;
        string type;
        poly<const INode_Descriptor> descriptor;
        poly<const INode_Config> config;
        vector<string> input_paths;
    };

    poly<const IUAV_Descriptor> uav_descriptor;

    vector<Bus_Data> buses;
    vector<Node_Data> nodes;
};


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Configs

struct Multirotor_Descriptor : public IUAV_Descriptor
{
    alias height_t = float : [ min = 0.01f, max = 100.f ];
    alias radius_t = float : [ min = 0.01f, max = 100.f ];
    alias torque_t = float : [ min = 0.01f, max = 1000.f ];
    alias thrust_t = float : [ min = 0.01f, max = 1000.f ];
    alias acceleration_t = float : [ min = 0.1f ];

    struct Motor
    {
        vec3f position;
        direction_t thrust_vector = {0.f, 0.f, 1.f};
        bool clockwise = false;
    };

    radius_t radius = 1.f : [ ui_name = "Radius (m)" ];
    height_t height = 1.f : [ ui_name = "Height (m)" ];
    torque_t motor_z_torque = 1.f : [ ui_name = "Motor Z Torque (Nm)" ];
    thrust_t motor_thrust = 1.f : [ ui_name = "Motor Thrust (N)" ];
    acceleration_t motor_acceleration = 10.f : [ ui_name = "Motor acceleration (N/s)" ];
    acceleration_t motor_deceleration = 10.f : [ ui_name = "Motor Deceleration (N/s)" ];
    vector<Motor> motors;
};

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Buses

struct UART_Linux_Descriptor : public IBus_Descriptor
{
    enum baud_t
    {
        _9600 : [ ui_name = "9600" ],
        _19200 : [ ui_name = "19200" ],
        _38400 : [ ui_name = "38400" ],
        _57600 : [ ui_name = "57600" ],
        _115200 : [ ui_name = "115200" ],
        _230400 : [ ui_name = "230400" ],
    };

    string dev = "/dev/ttyAMA0";
    baud_t baud = baud_t::_115200;
};
struct UART_BBang_Descriptor : public IBus_Descriptor
{
    uint32_t rx_pin = 0;
    uint32_t baud = 115200;
    bool invert = false;
};

struct I2C_BCM_Descriptor : public IBus_Descriptor
{
    alias dev_t = uint32_t : [ min = 0, max = 1 ];
    alias baud_t = uint32_t : [ min = 10000, max = 1000000 ];

    dev_t dev = 0;
    baud_t baud = 400000;
};
struct I2C_Linux_Descriptor : public IBus_Descriptor
{
    string dev = "/dev/i2c0";
};

struct SPI_BCM_Descriptor : public IBus_Descriptor
{
    alias dev_t = uint32_t : [ min = 0, max = 1 ];
    alias mode_t = uint32_t : [max = 3];
    alias speed_t = uint32_t : [ min = 1000 ];

    dev_t dev = 0;
    uint32_t baud = 1000000;
    mode_t mode = 0;
    speed_t speed = 1000000;
};
struct SPI_Linux_Descriptor : public IBus_Descriptor
{
    alias speed_t = uint32_t : [ min = 1000 ];

    string dev = "/dev/ttyAMA0";
    speed_t speed = 1000000;
};


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Nodes


//////////////////////////////////////////////////////////////
// Support structures

struct P_Controller_Descriptor
{
    ufloat kp = 0.f : [ ui_name = "kP" ];
};

struct PI_Controller_Descriptor : public P_Controller_Descriptor
{
    ufloat ki = 0.f : [ ui_name = "kI" ];
    ufloat max_i = 0.f : [ ui_name = "Max I" ];
};

struct PD_Controller_Descriptor : public P_Controller_Descriptor
{
    ufloat kd = 0.f : [ ui_name = "kD" ];
    muf_t d_filter = 0.f : [ ui_name = "D Filter" ];
};

struct PID_Controller_Descriptor : public PD_Controller_Descriptor
{
    ufloat ki = 0.f : [ ui_name = "kI" ];
    ufloat max_i = 0.f : [ ui_name = "Max I" ];
};

//////////////////////////////////////////////////////////////

struct ADC_Ammeter_Descriptor : public INode_Descriptor
{
    alias rate_t = uint32_t : [ min = 1, max = 10000, native_type = "uint32_t" ];

    rate_t rate = 100 : [ ui_name = "Rate (Hz)" ];
};

struct ADC_Ammeter_Config : public INode_Config
{
    float scale = 1.f : [ ui_name = "Scale" ];
    float bias = 0.f : [ ui_name = "Scale" ];
};

//////////////////////////////////////////////////////////////

struct ADC_Voltmeter_Descriptor : public INode_Descriptor
{
    alias rate_t = uint32_t : [ min = 1, max = 10000, native_type = "uint32_t" ];

    rate_t rate = 100 : [ ui_name = "Rate (Hz)" ];
};

struct ADC_Voltmeter_Config : public INode_Config
{
    float scale = 1.f : [ ui_name = "Scale" ];
    float bias = 0.f : [ ui_name = "Scale" ];
};

//////////////////////////////////////////////////////////////

struct ADS1115_Descriptor : public INode_Descriptor
{
    alias rate_t = uint32_t : [ min = 1, max = 200, native_type = "uint32_t" ];

    string bus : [ ui_name = "Bus" ];
    rate_t adc0_rate = 200 : [ ui_name = "ADC0 Rate (Hz)" ];
    rate_t adc1_rate = 200 : [ ui_name = "ADC1 Rate (Hz)" ];
    rate_t adc2_rate = 200 : [ ui_name = "ADC2 Rate (Hz)" ];
    rate_t adc3_rate = 200 : [ ui_name = "ADC3 Rate (Hz)" ];
};

struct ADS1115_Config : public INode_Config
{
};

//////////////////////////////////////////////////////////////

struct AVRADC_Descriptor : public INode_Descriptor
{
    alias rate_t = uint32_t : [ min = 1, max = 500, native_type = "uint32_t" ];

    string bus : [ ui_name = "Bus" ];
    rate_t rate = 200 : [ ui_name = "Rate (Hz)" ];
};

struct AVRADC_Config : public INode_Config
{
};

//////////////////////////////////////////////////////////////

struct Comp_AHRS_Descriptor : public INode_Descriptor
{
    alias rate_t = uint32_t : [ min = 1, max = 10000, native_type = "uint32_t" ];

    rate_t rate = 200 : [ ui_name = "Rate (Hz)" ];
};

struct Comp_AHRS_Config : public INode_Config
{
    muf_t drift_correction_factor = 0.3f : [ ui_name = "Drift Correction Factor" ];
};

//////////////////////////////////////////////////////////////

struct Combiner_Descriptor : public INode_Descriptor
{
    alias rate_t = uint32_t : [ min = 1, max = 10000, native_type = "uint32_t" ];

    rate_t rate = 200 : [ ui_name = "Rate (Hz)" ];
};

struct Combiner_Config : public INode_Config
{
};

//////////////////////////////////////////////////////////////

struct Gravity_Filter_Descriptor : public INode_Descriptor
{
    alias rate_t = uint32_t : [ min = 1, max = 10000, native_type = "uint32_t" ];

    rate_t rate = 1 : [ ui_name = "Rate (Hz)" ];
};

struct Gravity_Filter_Config : public INode_Config
{
};

//////////////////////////////////////////////////////////////

struct KF_ECEF_Descriptor : public INode_Descriptor
{
    alias rate_t = uint32_t : [ min = 1, max = 10000, native_type = "uint32_t" ];

    rate_t rate = 1 : [ ui_name = "Rate (Hz)" ];
};

struct KF_ECEF_Config : public INode_Config
{
    ufloat gps_position_lag = 0.f : [ ui_name = "GPS Position Lag (s)" ];
    ufloat gps_position_accuracy = 2.f : [ ui_name = "GPS Position Accuracy (CEP m)" ];
    ufloat gps_velocity_lag = 0.f : [ ui_name = "GPS Velocity Lag (s)" ];
    ufloat gps_velocity_accuracy = 0.2f : [ ui_name = "GPS Velocity Accuracy (m/s)" ];
    ufloat acceleration_lag = 0.f : [ ui_name = "Acceleration Lag (s)" ];
    ufloat acceleration_accuracy = 2.f : [ ui_name = "Acceleration Accuracy (m/s^2)" ];
};

//////////////////////////////////////////////////////////////

struct ENU_Frame_System_Descriptor : public INode_Descriptor
{
    alias rate_t = uint32_t : [ min = 1, max = 10000, native_type = "uint32_t" ];

    rate_t rate = 1 : [ ui_name = "Rate (Hz)" ];
};

struct ENU_Frame_System_Config : public INode_Config
{
};

//////////////////////////////////////////////////////////////

struct LPF_Descriptor : public INode_Descriptor
{
    alias rate_t = uint32_t : [ min = 1, max = 10000, native_type = "uint32_t" ];

    rate_t rate = 1 : [ ui_name = "Rate (Hz)" ];
};

struct LPF_Config : public INode_Config
{
    alias poles_t = uint32_t : [ max = 6 ];

    poles_t poles = 1 : [ ui_name = "LPF Poles" ];
    ufloat cutoff_frequency = 1.f : [ ui_name = "LPF Cutoff Frequency (Hz)" ];
};

//////////////////////////////////////////////////////////////

struct MaxSonar_Descriptor : public INode_Descriptor
{
    alias rate_t = uint32_t : [ min = 1, max = 15, native_type = "uint32_t" ];

    string bus : [ ui_name = "Bus" ];
    rate_t rate = 1 : [ ui_name = "Rate (Hz)" ];
};

struct MaxSonar_Config : public INode_Config
{
    direction_t direction : [ui_name = "Direction" ];
    ufloat max_distance = 10.f : [ui_name = "Maximum Distance (m)"];
    ufloat min_distance = 0.2f : [ui_name = "Minimum Distance (m)"];
};

//////////////////////////////////////////////////////////////

struct Motor_Mixer_Descriptor : public INode_Descriptor
{
    alias rate_t = uint32_t : [ min = 1, max = 10000, native_type = "uint32_t" ];

    rate_t rate = 1 : [ ui_name = "Rate (Hz)" ];
};

struct Motor_Mixer_Config : public INode_Config
{
    ufloat armed_thrust = 0.f : [ui_name = "Armed Thrust (N)"];
};

//////////////////////////////////////////////////////////////

struct Acceleration_Calibration_Point
{
    float temperature : [ ui_name = "Temperature" ];
    vec3f bias : [ ui_name = "Bias" ];
    vec3f scale = { 1.f, 1.f, 1.f } : [ ui_name = "Scale" ];
};
struct Angular_Velocity_Calibration_Point
{
    float temperature : [ ui_name = "Temperature" ];
    vec3f bias : [ ui_name = "Bias" ];
};
struct Magnetic_Field_Calibration_Point
{
    float temperature : [ ui_name = "Temperature" ];
    vec3f bias : [ ui_name = "Bias" ];
    vec3f scale = { 1.f, 1.f, 1.f } : [ ui_name = "Scale" ];
};

struct MPU9250_Descriptor : public INode_Descriptor
{
    alias rate_t = uint32_t : [ min = 1, max = 100, native_type = "uint32_t" ];

    enum imu_rate_t
    {
        _250 = 250 : [ ui_name = "250" ],
        _500 = 500: [ ui_name = "500" ],
        _1000 = 1000: [ ui_name = "1000" ],
    };

    enum acceleration_range_t
    {
        _2 = 2 : [ ui_name = "2" ],
        _4 = 4: [ ui_name = "4" ],
        _8 = 8: [ ui_name = "8" ],
        _16 = 16: [ ui_name = "16" ],
    };

    enum angular_velocity_range_t
    {
        _250 = 250 : [ ui_name = "250" ],
        _500 = 500: [ ui_name = "500" ],
        _1000 = 1000: [ ui_name = "1000" ],
        _2000 = 2000: [ ui_name = "2000" ],
    };

    string bus : [ ui_name = "Bus" ];
    imu_rate_t imu_rate = imu_rate_t::_1000 : [ ui_name = "IMU Rate (Hz)" ];
    rate_t magnetometer_rate = 100 : [ ui_name = "Magnetometer Rate (Hz)" ];
    rate_t thermometer_rate = 10 : [ ui_name = "Thermometer Rate (Hz)" ];
    acceleration_range_t acceleration_range = acceleration_range_t::_8 : [ ui_name = "Acceleration Range (G)" ];
    angular_velocity_range_t angular_velocity_range = angular_velocity_range_t::_500 : [ ui_name = "Angular Velocity Range (DPS)" ];
};

struct MPU9250_Config : public INode_Config
{
    struct Calibration
    {
        vector<Acceleration_Calibration_Point> acceleration : [ ui_name = "Acceleration" ];
        vector<Angular_Velocity_Calibration_Point> angular_velocity : [ ui_name = "Angular Velocity" ];
        vector<Magnetic_Field_Calibration_Point> magnetic_field : [ ui_name = "Magnetic Field" ];
    };

    euler3_t rotation : [ ui_name = "Rotation (deg)" ];
    Calibration calibration : [ ui_name = "Calibration" ];
};

//////////////////////////////////////////////////////////////

struct MS5611_Descriptor : public INode_Descriptor
{
    alias rate_t = uint32_t : [ min = 1, max = 100, native_type = "uint32_t" ];

    string bus : [ ui_name = "Bus" ];
    rate_t pressure_rate = 100 : [ ui_name = "Pressure Rate (Hz)" ];
    rate_t temperature_rate = 10 : [ ui_name = "Temperature Rate (Hz)" ];
};

struct MS5611_Config : public INode_Config
{
};

//////////////////////////////////////////////////////////////

struct Multirotor_Brain_Descriptor : public INode_Descriptor
{
    alias rate_t = uint32_t : [ min = 1, max = 10000, native_type = "uint32_t" ];

    rate_t rate = 100 : [ ui_name = "Rate (Hz)" ];
    rate_t commands_rate = 30 : [ ui_name = "Commands Rate (Hz)" ];
    rate_t state_rate = 30 : [ ui_name = "Commands Rate (Hz)" ];
};

struct Multirotor_Brain_Config : public INode_Config
{
    struct Horizontal_Angle
    {
        alias speed_deg_t = ufloat : [ min = 10.f, max = 3000.f ];

        speed_deg_t max_speed_deg = 180.f : [ ui_name = "Max Speed (deg/s)" ];

        alias Combined_XY_PIDs = PID_Controller_Descriptor : [ ui_name = "Combined" ];
        struct Separate_XY_PIDs : [ ui_name = "Separate" ]
        {
            PID_Controller_Descriptor x_pid : [ ui_name = "X" ];
            PID_Controller_Descriptor y_pid : [ ui_name = "Y" ];
        };

        variant<Combined_XY_PIDs, Separate_XY_PIDs> xy_pids : [ ui_name = "PIDs" ];
    };
    struct Horizontal_Position
    {
        alias speed_t = ufloat : [ max = 10.f ];

        speed_t max_speed = 2.f : [ ui_name = "Max Speed (m/s)" ];

        LPF_Config lpf : [ ui_name = "LPF" ];
        PI_Controller_Descriptor velocity_pi : [ ui_name = "Velocity PI" ];
        P_Controller_Descriptor position_p : [ ui_name = "Position P" ];
    };
    struct Yaw_Angle
    {
        alias speed_deg_t = ufloat : [ min = 10.f, max = 3000.f ];

        speed_deg_t max_speed_deg = 180.f : [ ui_name = "Max Speed (deg/s)" ];
        PID_Controller_Descriptor pid : [ ui_name = "PID" ];
    };
    struct Altitude
    {
        alias speed_t = ufloat : [ max = 10.f ];

        speed_t max_speed = 2.f : [ ui_name = "Max Speed (m/s)" ];
        LPF_Config lpf : [ ui_name = "LPF" ];
        PI_Controller_Descriptor speed_pi : [ ui_name = "Speed PI" ];
        P_Controller_Descriptor position_p : [ ui_name = "Position P" ];
    };

    ufloat max_thrust = 2.f : [ ui_name ="Max Thrust (N)" ];
    ufloat min_thrust = 1.f : [ ui_name ="Min Thrust (N)" ];
    Horizontal_Angle horizontal_angle : [ ui_name = "Horizontal Angle" ];
    Horizontal_Position horizontal_position : [ ui_name = "Horizontal Position" ];
    Yaw_Angle yaw_angle : [ ui_name = "Yaw Angle" ];
    Altitude altitude : [ ui_name = "Altitude" ];
};

//////////////////////////////////////////////////////////////

struct Multirotor_Pilot_Descriptor : public INode_Descriptor
{
    alias rate_t = uint32_t : [ min = 1, max = 10000, native_type = "uint32_t" ];

    rate_t commands_rate = 30 : [ ui_name = "Commands Rate (Hz)" ];
    rate_t state_rate = 30 : [ ui_name = "State Rate (Hz)" ];
    rate_t video_rate = 30 : [ ui_name = "Video Rate (Hz)" ];
};

struct Multirotor_Pilot_Config : public INode_Config
{
};

//////////////////////////////////////////////////////////////

struct Multirotor_Simulator_Descriptor : public INode_Descriptor
{
    alias rate_t = uint32_t : [ min = 1, max = 10000, native_type = "uint32_t" ];

    rate_t throttle_rate = 100 : [ ui_name = "Throttle Rate (Hz)" ];
    rate_t acceleration_rate = 1000 : [ ui_name = "Acceleration Rate (Hz)" ];
    rate_t angular_velocity_rate = 1000 : [ ui_name = "Angular Velocity Rate (Hz)" ];
    rate_t magnetic_field_rate = 100 : [ ui_name = "Magnetic Field Rate (Hz)" ];
    rate_t pressure_rate = 100 : [ ui_name = "Pressure Rate (Hz)" ];
    rate_t temperature_rate = 10 : [ ui_name = "Temperature Rate (Hz)" ];
    rate_t distance_rate = 12 : [ ui_name = "Distance Rate (Hz)" ];
    rate_t gps_rate = 5 : [ ui_name = "GPS Rate (Hz)" ];
};

struct Multirotor_Simulator_Config : public INode_Config
{
    struct Noise
    {
        ufloat gps_position = 2.f : [ ui_name = "GPS Position" ];
        ufloat gps_velocity = 0.2f : [ ui_name = "GPS Velocity" ];
        ufloat gps_pacc = 0.5f : [ ui_name = "GPS PACC" ];
        ufloat gps_vacc = 0.1f : [ ui_name = "GPS VACC" ];
        ufloat acceleration = 0.01f : [ ui_name = "Acceleration" ];
        ufloat angular_velocity = 0.01f : [ ui_name = "Angular Velocity" ];
        ufloat magnetic_field = 0.1f : [ ui_name = "Magnetic Field" ];
        ufloat pressure = 0.1f : [ ui_name = "Pressure" ];
        ufloat temperature = 0.1f : [ ui_name = "Temperature" ];
        ufloat ground_distance = 0.01f : [ ui_name = "Ground Distance" ];
    };

    bool simulation_enabled = true : [ ui_name = "Simulation Enabled" ];
    bool drag_enabled = true : [ ui_name = "Drag Enabled" ];
    bool ground_enabled = true : [ ui_name = "Ground Enabled" ];
    bool gravity_enabled = true : [ ui_name = "Gravity Enabled" ];
    Noise noise : [ ui_name = "Noise" ];
};

//////////////////////////////////////////////////////////////

struct Oscillator_Descriptor : public INode_Descriptor
{
    alias rate_t = uint32_t : [ min = 1, max = 10000, native_type = "uint32_t" ];
    alias component_count_t = int32_t : [ min = 1, max = 32 ];

    rate_t rate = 30 : [ ui_name = "Rate (Hz)" ];
    component_count_t component_count = 1 : [ ui_name = "Components" ];
};

struct Oscillator_Config : public INode_Config
{
    struct Component
    {
        ufloat frequency = 1.f : [ ui_name = "Frequency (Hz)" ];
        ufloat amplitude = 1.f : [ ui_name = "Amplitude" ];
        bool square = false : [ ui_name = "Square" ];
    };

    ufloat amplitude = 1.f : [ ui_name = "Amplitude" ];
    ufloat noise = 0.f : [ ui_name = "Noise" ];
    vector<Component> components : [ ui_name = "Components" ];
};

//////////////////////////////////////////////////////////////

struct PCA9685_Descriptor : public INode_Descriptor
{
    alias rate_t = uint32_t : [ min = 1, max = 8000, native_type = "uint32_t" ];

    string bus : [ ui_name = "Bus" ];
    rate_t rate = 30 : [ ui_name = "Rate (Hz)" ];
    uint8_t address = 64 : [ ui_name = "Address" ];

    struct Channel
    {
        bool enabled = false : [ ui_name = "Enabled"];
        bool servo_signal = false : [ ui_name = "Servo Signal"];
    };

    vector<Channel> channels : [ ui_name = "Channels" ];
};

struct PCA9685_Config : public INode_Config
{
    struct IChannel
    {
    };

    struct Servo_Channel : public IChannel
    {
        servo_signal_t min = 1.f : [ ui_name = "Min (ms)" ];
        servo_signal_t max = 2.f : [ ui_name = "Max (ms)" ];
    };
    struct PWM_Channel : public IChannel
    {
        pwm_signal_t min = 0.f : [ ui_name = "Min" ];
        pwm_signal_t max = 1.f : [ ui_name = "Max" ];
    };

    vector<poly<IChannel>> channels : [ ui_name = "Channels" ];
};

//////////////////////////////////////////////////////////////

struct PIGPIO_Descriptor : public INode_Descriptor
{
    alias rate_t = uint32_t : [ min = 1, max = 8000, native_type = "uint32_t" ];

    struct Channel
    {
        bool enabled = false : [ ui_name = "Enabled"];
        bool servo_signal = false : [ ui_name = "Servo Signal"];
        rate_t rate = 400 : [ ui_name = "Rate (Hz)" ];
    };

    Channel gpio_2 : [ ui_name = "GPIO 2" ];
    Channel gpio_3 : [ ui_name = "GPIO 3" ];
    Channel gpio_4 : [ ui_name = "GPIO 4" ];
    Channel gpio_5 : [ ui_name = "GPIO 5" ];
    Channel gpio_6 : [ ui_name = "GPIO 6" ];
    Channel gpio_7 : [ ui_name = "GPIO 7" ];
    Channel gpio_8 : [ ui_name = "GPIO 8" ];
    Channel gpio_9 : [ ui_name = "GPIO 9" ];
    Channel gpio_10 : [ ui_name = "GPIO 10" ];
    Channel gpio_11 : [ ui_name = "GPIO 11" ];
    Channel gpio_12 : [ ui_name = "GPIO 12" ];
    Channel gpio_13 : [ ui_name = "GPIO 13" ];
    Channel gpio_14 : [ ui_name = "GPIO 14" ];
    Channel gpio_15 : [ ui_name = "GPIO 15" ];
    Channel gpio_16 : [ ui_name = "GPIO 16" ];
    Channel gpio_17 : [ ui_name = "GPIO 17" ];
    Channel gpio_18 : [ ui_name = "GPIO 18" ];
    Channel gpio_19 : [ ui_name = "GPIO 19" ];
    Channel gpio_20 : [ ui_name = "GPIO 20" ];
    Channel gpio_21 : [ ui_name = "GPIO 21" ];
    Channel gpio_22 : [ ui_name = "GPIO 22" ];
    Channel gpio_23 : [ ui_name = "GPIO 23" ];
    Channel gpio_24 : [ ui_name = "GPIO 24" ];
    Channel gpio_25 : [ ui_name = "GPIO 25" ];
    Channel gpio_26 : [ ui_name = "GPIO 26" ];
    Channel gpio_27 : [ ui_name = "GPIO 27" ];
};

struct PIGPIO_Config : public INode_Config
{
    struct IChannel
    {
    };

    struct Servo_Channel : public IChannel
    {
        servo_signal_t min = 1.f : [ ui_name = "Min (ms)" ];
        servo_signal_t max = 2.f : [ ui_name = "Max (ms)" ];
    };
    struct PWM_Channel : public IChannel
    {
        pwm_signal_t min = 0.f : [ ui_name = "Min" ];
        pwm_signal_t max = 1.f : [ ui_name = "Max" ];
    };

    poly<IChannel> gpio_2 : [ ui_name = "GPIO 2" ];
    poly<IChannel> gpio_3 : [ ui_name = "GPIO 3" ];
    poly<IChannel> gpio_4 : [ ui_name = "GPIO 4" ];
    poly<IChannel> gpio_5 : [ ui_name = "GPIO 5" ];
    poly<IChannel> gpio_6 : [ ui_name = "GPIO 6" ];
    poly<IChannel> gpio_7 : [ ui_name = "GPIO 7" ];
    poly<IChannel> gpio_8 : [ ui_name = "GPIO 8" ];
    poly<IChannel> gpio_9 : [ ui_name = "GPIO 9" ];
    poly<IChannel> gpio_10 : [ ui_name = "GPIO 10" ];
    poly<IChannel> gpio_11 : [ ui_name = "GPIO 11" ];
    poly<IChannel> gpio_12 : [ ui_name = "GPIO 12" ];
    poly<IChannel> gpio_13 : [ ui_name = "GPIO 13" ];
    poly<IChannel> gpio_14 : [ ui_name = "GPIO 14" ];
    poly<IChannel> gpio_15 : [ ui_name = "GPIO 15" ];
    poly<IChannel> gpio_16 : [ ui_name = "GPIO 16" ];
    poly<IChannel> gpio_17 : [ ui_name = "GPIO 17" ];
    poly<IChannel> gpio_18 : [ ui_name = "GPIO 18" ];
    poly<IChannel> gpio_19 : [ ui_name = "GPIO 19" ];
    poly<IChannel> gpio_20 : [ ui_name = "GPIO 20" ];
    poly<IChannel> gpio_21 : [ ui_name = "GPIO 21" ];
    poly<IChannel> gpio_22 : [ ui_name = "GPIO 22" ];
    poly<IChannel> gpio_23 : [ ui_name = "GPIO 23" ];
    poly<IChannel> gpio_24 : [ ui_name = "GPIO 24" ];
    poly<IChannel> gpio_25 : [ ui_name = "GPIO 25" ];
    poly<IChannel> gpio_26 : [ ui_name = "GPIO 26" ];
    poly<IChannel> gpio_27 : [ ui_name = "GPIO 27" ];
};

//////////////////////////////////////////////////////////////

struct Pressure_Velocity_Descriptor : public INode_Descriptor
{
    alias rate_t = uint32_t : [ min = 1, max = 10000, native_type = "uint32_t" ];

    rate_t rate = 1 : [ ui_name = "Rate (Hz)" ];
};

struct Pressure_Velocity_Config : public INode_Config
{
};

//////////////////////////////////////////////////////////////

struct Proximity_Descriptor : public INode_Descriptor
{
    alias rate_t = uint32_t : [ min = 1, max = 10000, native_type = "uint32_t" ];
    alias channel_count_t = int32_t : [ min = 1, max = 128 ];

    rate_t rate = 1 : [ ui_name = "Rate (Hz)" ];
    channel_count_t channel_count = 1 : [ ui_name = "Channel Count" ];
};

struct Proximity_Config : public INode_Config
{
};

//////////////////////////////////////////////////////////////

struct Rate_Controller_Descriptor : public INode_Descriptor
{
    alias rate_t = uint32_t : [ min = 1, max = 10000, native_type = "uint32_t" ];

    rate_t rate = 1 : [ ui_name = "Rate (Hz)" ];
};

struct Rate_Controller_Config : public INode_Config
{
    struct Feedback
    {
        muf_t weight = 1.f : [ ui_name = "Weight" ];

        alias Combined_XY_PIDs = PID_Controller_Descriptor : [ ui_name = "Combined" ];
        struct Separate_XY_PIDs : [ ui_name = "Separate" ]
        {
            PID_Controller_Descriptor x_pid : [ ui_name = "X" ];
            PID_Controller_Descriptor y_pid : [ ui_name = "Y" ];
        };

        variant<Combined_XY_PIDs, Separate_XY_PIDs> xy_pids : [ ui_name = "XY PIDs" ];
        PID_Controller_Descriptor z_pid : [ ui_name = "Z PID" ];
    };
    struct Feedforward
    {
        alias torque_t = float : [ min = 0.01f ];

        muf_t weight = 0.f : [ ui_name = "Weight" ];
        torque_t max_torque = 1.f : [ ui_name = "Max Torque (N)" ];
    };

    Feedback feedback : [ ui_name = "Feedback" ];
    Feedforward feedforward : [ ui_name = "Feedforward" ];
};

//////////////////////////////////////////////////////////////

struct Raspicam_Descriptor : public INode_Descriptor
{
    struct Quality
    {
        alias resolution_t = vec2i : [ min = { 8, 8 }, max = { 1980, 1080 } ];
        alias bitrate_t = uint32_t : [ min = 10000, max = 32000000 ];

        resolution_t resolution : [ ui_name = "Resolution" ];
        bitrate_t bitrate : [ ui_name = "Bitrate" ];
    };

    alias fps_t = int32_t : [ min = 10, max = 60 ];

    fps_t fps : [ ui_name = "FPS" ];
    Quality streaming_low : [ ui_name = "Streaming Low" ];
    Quality streaming_high : [ ui_name = "Streaming High" ];
    Quality recording : [ ui_name = "Recording" ];
};

struct Raspicam_Config : public INode_Config
{
    alias iso_t = int32_t : [ min = 0, max = 1600 ];
    alias shutter_speed_t = float : [ min = 0.f, max = 1000.f ];
    alias ev_t = int32_t : [ min = -10, max = 10 ];
    alias sharpness_t = int32_t : [ min = 0, max = 100 ];
    alias contrast_t = int32_t : [ min = 0, max = 100 ];
    alias brightness_t = int32_t : [ min = 0, max = 100 ];
    alias saturation_t = int32_t : [ min = 0, max = 100 ];
    enum quality_t
    {
        LOW = 0 : [ ui_name = "Low" ],
        HIGH = 0 : [ ui_name = "High" ],
    };

    enum awb_mode_t
    {
        OFF = 0 : [ ui_name = "Off" ],
        AUTO : [ ui_name = "Auto" ],
        SUNLIGHT : [ ui_name = "Sunlight" ],
        CLOUDY : [ ui_name = "Cloudy" ],
        SHADE : [ ui_name = "Shade" ],
        TUNGSTEN : [ ui_name = "Tungsten" ],
        FLUORESCENT : [ ui_name = "Flourescent" ],
        INCANDESCENT : [ ui_name = "Incandescent" ],
        FLASH : [ ui_name = "Flash" ],
        HORIZON : [ ui_name = "Horizon" ],
    };

    iso_t iso : [ ui_name = "Iso" ];
    shutter_speed_t shutter_speed : [ ui_name = "Shutter Speed (ms)" ];
    ev_t ev : [ ui_name = "Exposure Compensation" ];
    sharpness_t sharpness : [ ui_name = "Sharpness" ];
    contrast_t contrast : [ ui_name = "Contrast" ];
    brightness_t brightness : [ ui_name = "Brightness" ];
    saturation_t saturation : [ ui_name = "Saturation" ];
    awb_mode_t awb_mode = awb_mode_t::AUTO : [ ui_name = "AWB Mode" ];
    quality_t quality = quality_t::HIGH : [ ui_name = "Quality" ];
    bool recording : [ ui_name = "Recording" ];
};

//////////////////////////////////////////////////////////////

struct RC5T619_Descriptor : public INode_Descriptor
{
    alias rate_t = uint32_t : [ min = 1, max = 200, native_type = "uint32_t" ];

    string bus : [ ui_name = "Bus" ];
    rate_t adc0_rate = 50 : [ ui_name = "ADC0 Rate (Hz)" ];
    rate_t adc1_rate = 5 : [ ui_name = "ADC1 Rate (Hz)" ];
};

struct RC5T619_Config : public INode_Config
{
};

//////////////////////////////////////////////////////////////

struct Resampler_Descriptor : public INode_Descriptor
{
    alias rate_t = uint32_t : [ min = 1, max = 10000, native_type = "uint32_t" ];

    rate_t input_rate = 1 : [ ui_name = "Input Rate (Hz)" ];
    rate_t output_rate = 1 : [ ui_name = "Output Rate (Hz)" ];
};

struct Resampler_Config : public INode_Config
{
    LPF_Config lpf : [ ui_name = "LPF" ];
};

//////////////////////////////////////////////////////////////

struct Scalar_Generator_Descriptor : public INode_Descriptor
{
    alias rate_t = uint32_t : [ min = 1, max = 10000, native_type = "uint32_t" ];

    rate_t rate = 1 : [ ui_name = "Rate (Hz)" ];
};

struct Scalar_Generator_Config : public INode_Config
{
    float value = 0.f : [ ui_name = "Value" ];
};

//////////////////////////////////////////////////////////////

struct Servo_Gimbal_Descriptor : public INode_Descriptor
{
    alias rate_t = uint32_t : [ min = 1, max = 10000, native_type = "uint32_t" ];

    rate_t rate = 1 : [ ui_name = "Rate (Hz)" ];
    rate_t commands_rate = 1 : [ ui_name = "Commands Rate (Hz)" ];
};

struct Servo_Gimbal_Config : public INode_Config
{
    struct Channel
    {
        euler_t min_angle = -180.f : [ ui_name = "Min Angle (°)" ];
        euler_t max_angle = 180.f : [ ui_name = "Max Angle (°)" ];
        pwm_signal_t min_pwm = 0.f :  [ ui_name = "Max PWM" ];
        pwm_signal_t max_pwm = 1.f :  [ ui_name = "Max PWM" ];
    };

    Channel x_channel : [ ui_name = "X Channel" ];
    Channel y_channel : [ ui_name = "Y Channel" ];
    Channel z_channel : [ ui_name = "Z Channel" ];
};

//////////////////////////////////////////////////////////////

struct SRF01_Descriptor : public INode_Descriptor
{
    alias rate_t = uint32_t : [ min = 1, max = 10, native_type = "uint32_t" ];

    string bus : [ ui_name = "Bus" ];
    rate_t rate = 1 : [ ui_name = "Rate (Hz)" ];
};

struct SRF01_Config : public INode_Config
{
    direction_t direction : [ui_name = "Direction" ];
    ufloat max_distance = 6.f : [ui_name = "Maximum Distance (m)"];
    ufloat min_distance = 0.2f : [ui_name = "Minimum Distance (m)"];
};

//////////////////////////////////////////////////////////////

struct SRF02_Descriptor : public INode_Descriptor
{
    alias rate_t = uint32_t : [ min = 1, max = 10, native_type = "uint32_t" ];

    string bus : [ ui_name = "Bus" ];
    rate_t rate = 1 : [ ui_name = "Rate (Hz)" ];
};

struct SRF02_Config : public INode_Config
{
    direction_t direction : [ui_name = "Direction" ];
    ufloat max_distance = 6.f : [ui_name = "Maximum Distance (m)"];
    ufloat min_distance = 0.2f : [ui_name = "Minimum Distance (m)"];
};

//////////////////////////////////////////////////////////////

struct Throttle_To_PWM_Descriptor : public INode_Descriptor
{
    alias rate_t = uint32_t : [ min = 1, max = 10000, native_type = "uint32_t" ];
    alias channel_count_t = int32_t : [ min = 1, max = 128 ];

    rate_t rate = 1 : [ ui_name = "Rate (Hz)" ];
    channel_count_t channel_count = 1 : [ ui_name = "Channel Count" ];
};

struct Throttle_To_PWM_Config : public INode_Config
{
};

//////////////////////////////////////////////////////////////

struct Transformer_Descriptor : public INode_Descriptor
{
    alias rate_t = uint32_t : [ min = 1, max = 10000, native_type = "uint32_t" ];

    rate_t rate = 1 : [ ui_name = "Rate (Hz)" ];
};

struct Transformer_Config : public INode_Config
{
};

//////////////////////////////////////////////////////////////

struct UBLOX_Descriptor : public INode_Descriptor
{
    alias rate_t = uint32_t : [ min = 1, max = 10, native_type = "uint32_t" ];

    string bus : [ ui_name = "Bus" ];
    rate_t rate = 1 : [ ui_name = "Rate (Hz)" ];
};

struct UBLOX_Config : public INode_Config
{
};

//////////////////////////////////////////////////////////////

struct Vec3_Generator_Descriptor : public INode_Descriptor
{
    alias rate_t = uint32_t : [ min = 1, max = 10000, native_type = "uint32_t" ];

    rate_t rate = 1 : [ ui_name = "Rate (Hz)" ];
};

struct Vec3_Generator_Config : public INode_Config
{
    vec3f value : [ ui_name = "Value" ];
};


