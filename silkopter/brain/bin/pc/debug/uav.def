//import "types.def"

alias int8_t = int64_t : [ min = -128, max = 127 ];
alias uint8_t = int64_t : [ min = 0, max = 255 ];
alias int16_t = int64_t : [ min = -32768, max = 32767 ];
alias uint16_t = int64_t : [ min = 0, max = 65535 ];
alias int32_t = int64_t : [ min = -2147483648, max = 2147483647 ];
alias uint32_t = int64_t : [ min = 0, max = 4294967295 ];
alias ufloat = float : [ min = 0.f ];

namespace silk
{

alias mass_t = ufloat;
alias rate_t = uint32_t : [ max = 10000 ];
alias muf_t = ufloat : [ max = 1.f ];
alias direction_t = math::vec3f;// : [ normalized = true ];
alias euler3_t = math::vec3f : [ min = {-180.f, -180.f, -180.f}, max = {180.f, 180.f, 180.f} ];
alias servo_signal_t = float : [ min = 1.f, max = 2.f ];
alias pwm_signal_t = float : [ min = 0.f, max = 1.f ];

struct UAV_Config_Base
{
    string name : [ui_name = "Name"];
    mass_t mass : [ui_name = "Mass (Kg)"];
    ufloat moment_of_inertia : [ui_name = "Moment Of Inertia"];
};

struct Multirotor_Config : public UAV_Config_Base
{
    struct Motor
    {
        math::vec3f position;
        math::vec3f thrust_vector = {0.f, 0.f, 1.f};
        bool clockwise = false;
    };

    ufloat radius = 1.f; //m
    ufloat height = 1.f; //m
    ufloat motor_z_torque = 0.f; //Nm
    ufloat motor_thrust = 1.f; //N
    ufloat motor_acceleration = 10.f; //N/s
    ufloat motor_deceleration = 10.f; //N/s
    vector<Motor> motors;
};

struct Bus_Descriptor_Base
{
};

struct Bus
{
    string name;
    string type;
    poly<Bus_Descriptor_Base> descriptor;
};

struct Node_Descriptor_Base
{
};

struct Node_Config_Base
{
};

struct Node
{
    string name;
    string type;
    poly<Node_Descriptor_Base> descriptor;
    poly<Node_Config_Base> config;
    vector<string> input_paths;
};

struct Settings
{
    poly<UAV_Config_Base> config;

    vector<Bus> buses;
    vector<Node> nodes;
};


struct UART_Linux_Descriptor : public Bus_Descriptor_Base
{
    string dev = "/dev/ttyAMA0";
    uint32_t baud = 115200;
};
struct UART_BBang_Descriptor : public Bus_Descriptor_Base
{
    uint32_t rx_pin = 0;
    uint32_t baud = 115200;
    bool invert = false;
};

struct I2C_BCM_Descriptor : public Bus_Descriptor_Base
{
    uint32_t dev = 0;
};
struct I2C_Linux_Descriptor : public Bus_Descriptor_Base
{
    string dev = "/dev/i2c0";
};

struct SPI_BCM_Descriptor : public Bus_Descriptor_Base
{
    alias mode_t = uint32_t : [max = 3];

    uint32_t dev = 0;
    uint32_t baud = 1000000;
    mode_t mode = 0;
};
struct SPI_Linux_Descriptor : public Bus_Descriptor_Base
{
    string dev = "/dev/ttyAMA0";
    uint32_t speed = 1000000;
};

struct P_Controller_Descriptor
{
    ufloat kp = 0.f : [ ui_name = "kP" ];
};

struct PI_Controller_Descriptor : public P_Controller_Descriptor
{
    ufloat ki = 0.f : [ ui_name = "kI" ];
    ufloat max_i = 0.f : [ ui_name = "Max I" ];
};

struct PD_Controller_Descriptor : public P_Controller_Descriptor
{
    ufloat kd = 0.f : [ ui_name = "kD" ];

    alias d_filter_t = ufloat : [ max = 1.f ];
    d_filter_t d_filter = 0.f : [ ui_name = "D Filter" ];
};

struct PID_Controller_Descriptor : public PD_Controller_Descriptor
{
    ufloat ki = 0.f : [ ui_name = "kI" ];
    ufloat max_i = 0.f : [ ui_name = "Max I" ];
};

//////////////////////////////////////////////////////////////

struct ADC_Ammeter_Descriptor : public Node_Descriptor_Base
{
    rate_t rate = 100 : [ ui_name = "Rate (Hz)" ];
};

struct ADC_Ammeter_Config : public Node_Config_Base
{
    float scale = 1.f : [ ui_name = "Scale" ];
    float bias = 0.f : [ ui_name = "Scale" ];
};

//////////////////////////////////////////////////////////////

struct ADC_Voltmeter_Descriptor : public Node_Descriptor_Base
{
    rate_t rate = 100 : [ ui_name = "Rate (Hz)" ];
};

struct ADC_Voltmeter_Config : public Node_Config_Base
{
    float scale = 1.f : [ ui_name = "Scale" ];
    float bias = 0.f : [ ui_name = "Scale" ];
};

//////////////////////////////////////////////////////////////

struct ADS1115_Descriptor : public Node_Descriptor_Base
{
    string bus : [ ui_name = "Bus" ];
    rate_t adc0_rate = 200 : [ ui_name = "ADC0 Rate (Hz)" ];
    rate_t adc1_rate = 200 : [ ui_name = "ADC1 Rate (Hz)" ];
    rate_t adc2_rate = 200 : [ ui_name = "ADC2 Rate (Hz)" ];
    rate_t adc3_rate = 200 : [ ui_name = "ADC3 Rate (Hz)" ];
};

struct ADS1115_Config : public Node_Config_Base
{
};

//////////////////////////////////////////////////////////////

struct AVRADC_Descriptor : public Node_Descriptor_Base
{
    string bus : [ ui_name = "Bus" ];
    rate_t rate = 200 : [ ui_name = "Rate (Hz)" ];
};

struct AVRADC_Config : public Node_Config_Base
{
};

//////////////////////////////////////////////////////////////

struct AHRS_Comp_Descriptor : public Node_Descriptor_Base
{
    rate_t rate = 200 : [ ui_name = "Rate (Hz)" ];
};

struct AHRS_Comp_Config : public Node_Config_Base
{
    muf_t drift_correction_factor = 0.3f : [ ui_name = "Drift Correction Factor" ];
};

//////////////////////////////////////////////////////////////

struct Combiner_Descriptor : public Node_Descriptor_Base
{
    rate_t rate = 200 : [ ui_name = "Rate (Hz)" ];
};

struct Combiner_Config : public Node_Config_Base
{
};

//////////////////////////////////////////////////////////////

struct Gravity_Filter_Descriptor : public Node_Descriptor_Base
{
    rate_t rate = 0 : [ ui_name = "Rate (Hz)" ];
};

struct Gravity_Filter_Config : public Node_Config_Base
{
};

//////////////////////////////////////////////////////////////

struct ECEF_KF_Descriptor : public Node_Descriptor_Base
{
    rate_t rate = 0 : [ ui_name = "Rate (Hz)" ];
};

struct ECEF_KF_Filter_Config : public Node_Config_Base
{
    ufloat gps_position_lag = 0.f : [ ui_name = "GPS Position Lag (s)" ];
    ufloat gps_position_accuracy = 2.f : [ ui_name = "GPS Position Accuracy (CEP m)" ];
    ufloat gps_velocity_lag = 0.f : [ ui_name = "GPS Velocity Lag (s)" ];
    ufloat gps_velocity_accuracy = 0.2f : [ ui_name = "GPS Velocity Accuracy (m/s)" ];
    ufloat acceleration_lag = 0.f : [ ui_name = "Acceleration Lag (s)" ];
    ufloat acceleration_accuracy = 2.f : [ ui_name = "Acceleration Accuracy (m/s^2)" ];
};

//////////////////////////////////////////////////////////////

struct LPF_Descriptor : public Node_Descriptor_Base
{
    rate_t rate = 0 : [ ui_name = "Rate (Hz)" ];
};

struct LPF_Filter_Config : public Node_Config_Base
{
    alias lpf_poles_t = uint32_t : [ max = 6 ];

    lpf_poles_t lpf_poles = 1 : [ ui_name = "LPF Poles" ];
    ufloat lpf_cutoff_frequency = 1.f : [ ui_name = "LPF Cutoff Frequency (Hz)" ];
};

//////////////////////////////////////////////////////////////

struct MaxSonar_Descriptor : public Node_Descriptor_Base
{
    string bus : [ ui_name = "Bus" ];
    rate_t rate = 0 : [ ui_name = "Rate (Hz)" ];
};

struct MaxSonar_Config : public Node_Config_Base
{
    direction_t direction : [ui_name = "Direction" ];
    ufloat max_distance = 6.f : [ui_name = "Maximum Distance (m)"];
    ufloat min_distance = 0.2f : [ui_name = "Minimum Distance (m)"];
};

//////////////////////////////////////////////////////////////

struct Motor_Mixer_Descriptor : public Node_Descriptor_Base
{
    rate_t rate = 0 : [ ui_name = "Rate (Hz)" ];
};

struct Motor_Mixer_Config : public Node_Config_Base
{
    ufloat armed_thrust = 0.f : [ui_name = "Armed Thrust (N)"];
};

//////////////////////////////////////////////////////////////

struct Acceleration_Calibration_Point
{
    float temperature : [ ui_name = "Temperature" ];
    math::vec3f bias : [ ui_name = "Bias" ];
    math::vec3f scale = { 1.f, 1.f, 1.f } : [ ui_name = "Scale" ];
};
struct Angular_Velocity_Calibration_Point
{
    float temperature : [ ui_name = "Temperature" ];
    math::vec3f bias : [ ui_name = "Bias" ];
};
struct Magnetic_Field_Calibration_Point
{
    float temperature : [ ui_name = "Temperature" ];
    math::vec3f bias : [ ui_name = "Bias" ];
    math::vec3f scale = { 1.f, 1.f, 1.f } : [ ui_name = "Scale" ];
};

struct MPU9250_Descriptor : public Node_Descriptor_Base
{
    string bus : [ ui_name = "Bus" ];
    rate_t imu_rate = 1000 : [ ui_name = "IMU Rate (Hz)" ];
    rate_t magnetometer_rate = 100 : [ ui_name = "Magnetometer Rate (Hz)" ];
    rate_t thermometer_rate = 10 : [ ui_name = "Thermometer Rate (Hz)" ];
    uint32_t acceleration_range = 8 : [ ui_name = "Acceleration Range (G)" ];
    uint32_t angular_velocity_range = 500 : [ ui_name = "Angular Velocity Range (DPS)" ];
};

struct MPU9250_Config : public Node_Config_Base
{
    struct Calibration
    {
        vector<Acceleration_Calibration_Point> acceleration : [ ui_name = "Acceleration" ];
        vector<Angular_Velocity_Calibration_Point> angular_velocity : [ ui_name = "Angular Velocity" ];
        vector<Magnetic_Field_Calibration_Point> magnetic_field : [ ui_name = "Magnetic Field" ];
    };

    euler3_t rotation : [ ui_name = "Rotation (deg)" ];
    Calibration calibration : [ ui_name = "Calibration" ];
};

//////////////////////////////////////////////////////////////

struct MS5611_Descriptor : public Node_Descriptor_Base
{
    string bus : [ ui_name = "Bus" ];
    rate_t pressure_rate = 100 : [ ui_name = "Pressure Rate (Hz)" ];
    rate_t temperature_rate = 10 : [ ui_name = "Temperature Rate (Hz)" ];
};

struct MS5611_Config : public Node_Config_Base
{
};

//////////////////////////////////////////////////////////////

struct Multirotor_Brain_Descriptor : public Node_Descriptor_Base
{
    rate_t rate = 100 : [ ui_name = "Rate (Hz)" ];
    rate_t commands_rate = 30 : [ ui_name = "Commands Rate (Hz)" ];
    rate_t state_rate = 30 : [ ui_name = "Commands Rate (Hz)" ];
};

struct Multirotor_Brain_Config : public Node_Config_Base
{
    struct Horizontal_Angle
    {
        alias speed_deg_t = ufloat : [ max = 500.f ];

        speed_deg_t max_speed_deg = 180.f : [ ui_name = "Max Speed (deg/s)" ];
        bool combined_pids = true : [ ui_name = "Combined PIDs" ];
        PID_Controller_Descriptor pids : [ ui_name = "PIDs" ];
        PID_Controller_Descriptor x_pid : [ ui_name = "X PID" ];
        PID_Controller_Descriptor y_pid : [ ui_name = "Y PID" ];
    };
    struct Horizontal_Position
    {
        alias speed_t = ufloat : [ max = 100.f ];

        speed_t max_speed = 2.f : [ ui_name = "Max Speed (m/s)" ];

        LPF_Filter_Config lpf : [ ui_name = "LPF" ];
        PI_Controller_Descriptor velocity_pi : [ ui_name = "Velocity PI" ];
        P_Controller_Descriptor position_p : [ ui_name = "Position P" ];
    };
    struct Yaw_Angle
    {
        alias speed_deg_t = ufloat : [ max = 500.f ];
        speed_deg_t max_speed_deg = 180.f : [ ui_name = "Max Speed (deg/s)" ];
        PID_Controller_Descriptor pid : [ ui_name = "PID" ];
    };
    struct Altitude
    {
        alias speed_t = ufloat : [ max = 100.f ];

        speed_t max_speed = 2.f : [ ui_name = "Max Speed (m/s)" ];
        LPF_Filter_Config lpf : [ ui_name = "LPF" ];
        PI_Controller_Descriptor speed_pi : [ ui_name = "Speed PI" ];
        P_Controller_Descriptor position_p : [ ui_name = "Position P" ];
    };

    Horizontal_Angle horizontal_angle : [ ui_name = "Horizontal Angle" ];
    Horizontal_Position horizontal_position : [ ui_name = "Horizontal Position" ];
    Yaw_Angle yaw_angle : [ ui_name = "Yaw Angle" ];
    Altitude altitude : [ ui_name = "Altitude" ];
};

//////////////////////////////////////////////////////////////

struct Multirotor_Pilot_Descriptor : public Node_Descriptor_Base
{
    rate_t commands_rate = 30 : [ ui_name = "Commands Rate (Hz)" ];
    rate_t state_rate = 30 : [ ui_name = "State Rate (Hz)" ];
    rate_t video_rate = 30 : [ ui_name = "Video Rate (Hz)" ];
};

struct Multirotor_Pilot_Config : public Node_Config_Base
{
};

//////////////////////////////////////////////////////////////

struct Multirotor_Simulator_Descriptor : public Node_Descriptor_Base
{
    rate_t throttle_rate = 100 : [ ui_name = "Throttle Rate (Hz)" ];
    rate_t acceleration_rate = 1000 : [ ui_name = "Acceleration Rate (Hz)" ];
    rate_t angular_velocity_rate = 1000 : [ ui_name = "Angular Velocity Rate (Hz)" ];
    rate_t magnetic_field_rate = 100 : [ ui_name = "Magnetic Field Rate (Hz)" ];
    rate_t pressure_rate = 100 : [ ui_name = "Pressure Rate (Hz)" ];
    rate_t temperature_rate = 10 : [ ui_name = "Temperature Rate (Hz)" ];
    rate_t distance_rate = 12 : [ ui_name = "Distance Rate (Hz)" ];
    rate_t gps_rate = 5 : [ ui_name = "GPS Rate (Hz)" ];
};

struct Multirotor_Simulator_Config : public Node_Config_Base
{
    struct Noise
    {
        ufloat gps_position = 2.f : [ ui_name = "GPS Position" ];
        ufloat gps_velocity = 0.2f : [ ui_name = "GPS Velocity" ];
        ufloat gps_pacc = 0.5f : [ ui_name = "GPS PACC" ];
        ufloat gps_vacc = 0.1f : [ ui_name = "GPS VACC" ];
        ufloat acceleration = 0.01f : [ ui_name = "Acceleration" ];
        ufloat angular_velocity = 0.01f : [ ui_name = "Angular Velocity" ];
        ufloat magnetic_field = 0.1f : [ ui_name = "Magnetic Field" ];
        ufloat pressure = 0.1f : [ ui_name = "Pressure" ];
        ufloat temperature = 0.1f : [ ui_name = "Temperature" ];
        ufloat ground_distance = 0.01f : [ ui_name = "Ground Distance" ];
    };

    bool simulation_enabled = true : [ ui_name = "Simulation Enabled" ];
    bool drag_enabled = true : [ ui_name = "Drag Enabled" ];
    bool ground_enabled = true : [ ui_name = "Ground Enabled" ];
    bool gravity_enabled = true : [ ui_name = "Gravity Enabled" ];
    Noise noise : [ ui_name = "Noise" ];
};

//////////////////////////////////////////////////////////////

struct Oscillator_Descriptor : public Node_Descriptor_Base
{
    alias component_count_t = int32_t : [ min = 1, max = 32 ];

    rate_t rate = 30 : [ ui_name = "Rate (Hz)" ];
    component_count_t component_count = 1 : [ ui_name = "Components" ];
};

struct Oscillator_Config : public Node_Config_Base
{
    struct Component
    {
        ufloat frequency = 1.f : [ ui_name = "Frequency (Hz)" ];
        ufloat amplitude = 1.f : [ ui_name = "Amplitude" ];
        bool square = false : [ ui_name = "Square" ];
    };

    ufloat amplitude = 1.f : [ ui_name = "Amplitude" ];
    ufloat noise = 0.f : [ ui_name = "Noise" ];
    vector<Component> components : [ ui_name = "Components" ];
};

//////////////////////////////////////////////////////////////

struct PCA9685_Descriptor : public Node_Descriptor_Base
{
    string bus : [ ui_name = "Bus" ];
    rate_t rate = 30 : [ ui_name = "Rate (Hz)" ];
    uint8_t address = 64 : [ ui_name = "Address" ];
};

struct PCA9685_Config : public Node_Config_Base
{
    struct Channel
    {
        bool servo_signal = false : [ ui_name = "Servo Signal" ];
        servo_signal_t min_servo = 1.f : [ ui_name = "Min Servo (ms)" ];
        servo_signal_t max_servo = 2.f : [ ui_name = "Max Servo (ms)" ];
        pwm_signal_t min_pwm = 0.f : [ ui_name = "Min PWM" ];
        pwm_signal_t max_pwm = 1.f : [ ui_name = "Max PWM" ];
    };

    vector<Channel> channels : [ ui_name = "Channels" ];
};

//////////////////////////////////////////////////////////////

struct PIGPIO_Descriptor : public Node_Descriptor_Base
{
    struct Channel
    {
        bool enabled = false : [ ui_name = "Enabled"];
        bool servo_signal = false : [ ui_name = "Servo Signal"];
        rate_t rate = 400 : [ ui_name = "Rate (Hz)" ];
    };

    Channel gpio_2 : [ ui_name = "GPIO 2" ];
    Channel gpio_3 : [ ui_name = "GPIO 3" ];
    Channel gpio_4 : [ ui_name = "GPIO 4" ];
    Channel gpio_5 : [ ui_name = "GPIO 5" ];
    Channel gpio_6 : [ ui_name = "GPIO 6" ];
    Channel gpio_7 : [ ui_name = "GPIO 7" ];
    Channel gpio_8 : [ ui_name = "GPIO 8" ];
    Channel gpio_9 : [ ui_name = "GPIO 9" ];
    Channel gpio_10 : [ ui_name = "GPIO 10" ];
    Channel gpio_11 : [ ui_name = "GPIO 11" ];
    Channel gpio_12 : [ ui_name = "GPIO 12" ];
    Channel gpio_13 : [ ui_name = "GPIO 13" ];
    Channel gpio_14 : [ ui_name = "GPIO 14" ];
    Channel gpio_15 : [ ui_name = "GPIO 15" ];
    Channel gpio_16 : [ ui_name = "GPIO 16" ];
    Channel gpio_17 : [ ui_name = "GPIO 17" ];
    Channel gpio_18 : [ ui_name = "GPIO 18" ];
    Channel gpio_19 : [ ui_name = "GPIO 19" ];
    Channel gpio_20 : [ ui_name = "GPIO 20" ];
    Channel gpio_21 : [ ui_name = "GPIO 21" ];
    Channel gpio_22 : [ ui_name = "GPIO 22" ];
    Channel gpio_23 : [ ui_name = "GPIO 23" ];
    Channel gpio_24 : [ ui_name = "GPIO 24" ];
    Channel gpio_25 : [ ui_name = "GPIO 25" ];
    Channel gpio_26 : [ ui_name = "GPIO 26" ];
    Channel gpio_27 : [ ui_name = "GPIO 27" ];
};

struct PIGPIO_Config : public Node_Config_Base
{
    struct Channel
    {
        servo_signal_t min_servo = 1.f : [ ui_name = "Min Servo (ms)" ];
        servo_signal_t max_servo = 2.f : [ ui_name = "Max Servo (ms)" ];
        pwm_signal_t min_pwm = 0.f : [ ui_name = "Min PWM" ];
        pwm_signal_t max_pwm = 1.f : [ ui_name = "Max PWM" ];
    };

    Channel gpio_2 : [ ui_name = "GPIO 2" ];
    Channel gpio_3 : [ ui_name = "GPIO 3" ];
    Channel gpio_4 : [ ui_name = "GPIO 4" ];
    Channel gpio_5 : [ ui_name = "GPIO 5" ];
    Channel gpio_6 : [ ui_name = "GPIO 6" ];
    Channel gpio_7 : [ ui_name = "GPIO 7" ];
    Channel gpio_8 : [ ui_name = "GPIO 8" ];
    Channel gpio_9 : [ ui_name = "GPIO 9" ];
    Channel gpio_10 : [ ui_name = "GPIO 10" ];
    Channel gpio_11 : [ ui_name = "GPIO 11" ];
    Channel gpio_12 : [ ui_name = "GPIO 12" ];
    Channel gpio_13 : [ ui_name = "GPIO 13" ];
    Channel gpio_14 : [ ui_name = "GPIO 14" ];
    Channel gpio_15 : [ ui_name = "GPIO 15" ];
    Channel gpio_16 : [ ui_name = "GPIO 16" ];
    Channel gpio_17 : [ ui_name = "GPIO 17" ];
    Channel gpio_18 : [ ui_name = "GPIO 18" ];
    Channel gpio_19 : [ ui_name = "GPIO 19" ];
    Channel gpio_20 : [ ui_name = "GPIO 20" ];
    Channel gpio_21 : [ ui_name = "GPIO 21" ];
    Channel gpio_22 : [ ui_name = "GPIO 22" ];
    Channel gpio_23 : [ ui_name = "GPIO 23" ];
    Channel gpio_24 : [ ui_name = "GPIO 24" ];
    Channel gpio_25 : [ ui_name = "GPIO 25" ];
    Channel gpio_26 : [ ui_name = "GPIO 26" ];
    Channel gpio_27 : [ ui_name = "GPIO 27" ];
};

//////////////////////////////////////////////////////////////

struct Pressure_Velocity_Descriptor : public Node_Descriptor_Base
{
    rate_t rate = 0 : [ ui_name = "Rate (Hz)" ];
};

struct Pressure_Velocity_Config : public Node_Config_Base
{
};

//////////////////////////////////////////////////////////////

struct Proximity_Descriptor : public Node_Descriptor_Base
{
    alias channel_count_t = int32_t : [ min = 1, max = 128 ];

    rate_t rate = 0 : [ ui_name = "Rate (Hz)" ];
    channel_count_t channel_count = 1 : [ ui_name = "Channel Count" ];
};

struct Proximity_Config : public Node_Config_Base
{
};

//////////////////////////////////////////////////////////////

struct Raspicam_Descriptor : public Node_Descriptor_Base
{
    struct Quality
    {
        alias resolution_t = math::vec2s32 : [ min = { 8, 8 }, max = { 1980, 1080 } ];
        alias bitrate_t = int32_t : [ min = 10000, max = 32000000 ];

        resolution_t resolution : [ ui_name = "Resolution" ];
        bitrate_t bitrate : [ ui_name = "Bitrate" ];
    };

    alias fps_t = int32_t : [ min = 10, max = 60 ];

    fps_t fps : [ ui_name = "FPS" ];
    Quality streaming_low : [ ui_name = "Streaming Low" ];
    Quality streaming_high : [ ui_name = "Streaming High" ];
    Quality recording : [ ui_name = "Recording" ];
};

struct Raspicam_Config : public Node_Config_Base
{
    alias iso_t = int32_t : [ min = 0, max = 1600 ];
    alias shutter_speed_t = float : [ min = 0, max = 1000 ];
    alias ev_t = int32_t : [ min = -10, max = 10 ];
    alias sharpness_t = int32_t : [ min = 0, max = 100 ];
    alias contrast_t = int32_t : [ min = 0, max = 100 ];
    alias brightness_t = int32_t : [ min = 0, max = 100 ];
    alias saturation_t = int32_t : [ min = 0, max = 100 ];
    alias awb_mode_t = int32_t : [ min = 0, max = 8 ];
    alias quality_t = int32_t : [ min = 0, max = 1 ];

    iso_t iso : [ ui_name = "Iso" ];
    shutter_speed_t shutter_speed : [ ui_name = "Shutter Speed (ms)" ];
    ev_t ev : [ ui_name = "Exposure Compensation" ];
    sharpness_t sharpness : [ ui_name = "Sharpness" ];
    contrast_t contrast : [ ui_name = "Contrast" ];
    brightness_t brightness : [ ui_name = "Brightness" ];
    saturation_t saturation : [ ui_name = "Saturation" ];
    awb_mode_t awb_mode : [ ui_name = "AWB Mode" ];
    quality_t quality : [ ui_name = "Quality" ];
    bool recording : [ ui_name = "Recording" ];
};


}

