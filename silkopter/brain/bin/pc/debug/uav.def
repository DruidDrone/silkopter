//import "types.def"

alias int8_t = int64_t : [ min = -128, max = 127 ];
alias uint8_t = int64_t : [ min = 0, max = 255 ];
alias int16_t = int64_t : [ min = -32768, max = 32767 ];
alias uint16_t = int64_t : [ min = 0, max = 65535 ];
alias int32_t = int64_t : [ min = -2147483648, max = 2147483647 ];
alias uint32_t = int64_t : [ min = 0, max = 4294967295 ];
alias ufloat = float : [ min = 0.f ];

namespace silk
{

alias mass_t = ufloat;
alias rate_t = uint32_t : [ max = 10000 ];

struct UAV_Config_Base
{
    string name : [ui_name = "Name"];
    mass_t mass : [ui_name = "Mass (Kg)"];
    ufloat moment_of_inertia : [ui_name = "Moment Of Inertia"];
};

struct Multirotor_Config : public UAV_Config_Base
{
    struct Motor
    {
        math::vec3f position;
        math::vec3f thrust_vector = {0.f, 0.f, 1.f};
        bool clockwise = false;
    };

    ufloat radius = 1.f; //m
    ufloat height = 1.f; //m
    ufloat motor_z_torque = 0.f; //Nm
    ufloat motor_thrust = 1.f; //N
    ufloat motor_acceleration = 10.f; //N/s
    ufloat motor_deceleration = 10.f; //N/s
    vector<Motor> motors;
};

struct Bus_Descriptor_Base
{
};

struct Bus
{
    string name;
    string type;
    poly<Bus_Descriptor_Base> descriptor;
};

struct Node_Descriptor_Base
{
};

struct Node_Config_Base
{
};

struct Node
{
    string name;
    string type;
    poly<Node_Descriptor_Base> descriptor;
    poly<Node_Config_Base> config;
    vector<string> input_paths;
};

struct Settings
{
    poly<UAV_Config_Base> config;

    vector<Bus> buses;
    vector<Node> nodes;
};


struct UART_Linux_Descriptor : public Bus_Descriptor_Base
{
    string dev = "/dev/ttyAMA0";
    uint32_t baud = 115200;
};
struct UART_BBang_Descriptor : public Bus_Descriptor_Base
{
    uint32_t rx_pin = 0;
    uint32_t baud = 115200;
    bool invert = false;
};

struct I2C_BCM_Descriptor : public Bus_Descriptor_Base
{
    uint32_t dev = 0;
};
struct I2C_Linux_Descriptor : public Bus_Descriptor_Base
{
    string dev = "/dev/i2c0";
};

struct SPI_BCM_Descriptor : public Bus_Descriptor_Base
{
    alias mode_t = uint32_t : [max = 3];

    uint32_t dev = 0;
    uint32_t baud = 1000000;
    mode_t mode = 0;
};
struct SPI_Linux_Descriptor : public Bus_Descriptor_Base
{
    string dev = "/dev/ttyAMA0";
    uint32_t speed = 1000000;
};

struct P_Controller_Descriptor
{
    ufloat kp = 0.f : [ ui_name = "kP" ];
};

struct PI_Controller_Descriptor : public P_Controller_Descriptor
{
    ufloat ki = 0.f : [ ui_name = "kI" ];
    ufloat max_i = 0.f : [ ui_name = "Max I" ];
};

struct PD_Controller_Descriptor : public P_Controller_Descriptor
{
    ufloat kd = 0.f : [ ui_name = "kD" ];

    alias d_filter_t = ufloat : [ max = 1.f ];
    d_filter_t d_filter = 0.f : [ ui_name = "D Filter" ];
};

struct PID_Controller_Descriptor : public PD_Controller_Descriptor
{
    ufloat ki = 0.f : [ ui_name = "kI" ];
    ufloat max_i = 0.f : [ ui_name = "Max I" ];
};


struct Multirotor_Brain_Descriptor : public Node_Descriptor_Base
{
    rate_t rate = 100 : [ ui_name = "Rate (Hz)" ];
    rate_t commands_rate = 30 : [ ui_name = "Commands Rate (Hz)" ];
    rate_t state_rate = 30 : [ ui_name = "Commands Rate (Hz)" ];
};

struct Multirotor_Brain_Config : public Node_Config_Base
{
    struct Horizontal_Angle
    {
        alias speed_deg_t = ufloat : [ max = 500.f ];

        speed_deg_t max_speed_deg = 180.f : [ ui_name = "Max Speed (deg/s)" ];
        bool combined_pids = true : [ ui_name = "Combined PIDs" ];
        PID_Controller_Descriptor pids : [ ui_name = "PIDs" ];
        PID_Controller_Descriptor x_pid : [ ui_name = "X PID" ];
        PID_Controller_Descriptor y_pid : [ ui_name = "Y PID" ];
    };
    struct Horizontal_Position
    {
        alias speed_t = ufloat : [ max = 100.f ];
        alias lpf_poles_t = uint32_t : [ max = 6 ];

        speed_t max_speed = 2.f : [ ui_name = "Max Speed (m/s)" ];
        lpf_poles_t lpf_poles = 1 : [ ui_name = "LPF Poles" ];
        ufloat lpf_cutoff_frequency = 1.f : [ ui_name = "LPF Cutoff Frequency (Hz)" ];
        PI_Controller_Descriptor velocity_pi : [ ui_name = "Velocity PI" ];
        P_Controller_Descriptor position_p : [ ui_name = "Position P" ];
    };
    struct Yaw_Angle
    {
        alias speed_deg_t = ufloat : [ max = 500.f ];
        speed_deg_t max_speed_deg = 180.f : [ ui_name = "Max Speed (deg/s)" ];
        PID_Controller_Descriptor pid : [ ui_name = "PID" ];
    };
    struct Altitude
    {
        alias speed_t = ufloat : [ max = 100.f ];
        alias lpf_poles_t = uint32_t : [ max = 6 ];

        speed_t max_speed = 2.f : [ ui_name = "Max Speed (m/s)" ];
        lpf_poles_t lpf_poles = 1 : [ ui_name = "LPF Poles" ];
        ufloat lpf_cutoff_frequency = 1.f : [ ui_name = "LPF Cutoff Frequency (Hz)" ];
        PI_Controller_Descriptor speed_pi : [ ui_name = "Speed PI" ];
        P_Controller_Descriptor position_p : [ ui_name = "Position P" ];
    };

    Horizontal_Angle horizontal_angle : [ ui_name = "Horizontal Angle" ];
    Horizontal_Position horizontal_position : [ ui_name = "Horizontal Position" ];
    Yaw_Angle yaw_angle : [ ui_name = "Yaw Angle" ];
    Altitude altitude : [ ui_name = "Altitude" ];
};

}

